<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[diaspora]]></title>
  <link href="http://blog.kakipo.com/atom.xml" rel="self"/>
  <link href="http://blog.kakipo.com/"/>
  <updated>2014-08-10T11:45:00+09:00</updated>
  <id>http://blog.kakipo.com/</id>
  <author>
    <name><![CDATA[kakipo]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[Docker 初心者は phusion/baseimage-docker を使おう]]></title>
    <link href="http://blog.kakipo.com/use-phusion-baseimage-docker/"/>
    <updated>2014-08-10T08:44:51+09:00</updated>
    <id>http://blog.kakipo.com/use-phusion-baseimage-docker</id>
    <content type="html"><![CDATA[<h1>tl;dr</h1>

<p>Docker 初心者は <a href="https://github.com/phusion/baseimage-docker">phusion/baseimage-docker</a> をベースイメージとして使おう。<br/>
色々と便利だしハマる機会が減る。</p>

<h1>遅ればせながら Docker 入門した</h1>

<p>新たにアプリケーションを作る機会があり、週末を利用し遅ればせながら Docker について調べた。<br/>
すでにネット上に多くの入門記事がアップされていたおかげで導入自体は簡単にできたが、「まともな」イメージを作成しようとすると壁にぶちあたることになった。たとえば&hellip;</p>

<ul>
<li>コンテナに ssh 接続するにはどうすればいいの？</li>
<li>syslog 起動してないの？</li>
<li>cron は？</li>
<li>解析のために fluentd とか newrelic agent とかも入れたいな&hellip;</li>
</ul>


<p>いずれも 1 コンテナ 1 プロセスしか許容されていないという思い込みによるもので、Docker 入門者の多くが通る道なようだ。</p>

<p>公式ドキュメントをちゃんと読めば複数プロセスを生やすために Supervisor を利用する方法が紹介されている。</p>

<p><a href="https://docs.docker.com/articles/using_supervisord/">Using Supervisor &ndash; Docker Documentation</a></p>

<p>まぁ、これはこれで良いのだけれど個人的には <a href="https://github.com/phusion/baseimage-docker">phusion/baseimage-docker</a> の利用をオススメしたい。</p>

<p>複数プロセス管理以外にも Docker を使う上で便利な各種ツールや様々な問題を回避するための仕組みが用意されている。</p>

<p>積極的に巨人の肩に乗るべきだ。特に自分のような初心者は。</p>

<h1>phusion/baseimage-docker とは</h1>

<p>phusion/baseimage-docker（以下 baseimage-docker） とは <a href="https://www.phusionpassenger.com/">Phusion Passenger</a> という有名なソフトウェアを作成している Phusion が開発を続けている Docker イメージだ。</p>

<p>Phusion Passenger 自体は Rails アプリ開発者であれば一度は目にしたことがあると思う。Nginx や Apache の設定ファイルにちょろっと書くだけで、それらがアプリサーバに変わって動作してくれるという画期的なソフトウェアだ。公式サイトを見たら Python や Node.js にも対応しているらしい。知らなかった。</p>

<p>話がそれた。</p>

<p>baseimage-docker の利点として先にも述べたように、Docker を利用するにあたってぶち当たるであろう様々な問題を回避するための仕組みが用意されている。</p>

<p>いくつか紹介したい。</p>

<ul>
<li><p>正しい init プロセス<br/>
  Unix プロセスモデルでは init プロセス (PID 1) はすべての孤児プロセス（親プロセスが終了したプロセス）を回収し、正しく終了するという責務がある。しかしほとんどの Docker コンテナはこれを正しく行えていないために、ゾンビプロセスが発生しうる。<br/>
  また、 <code>docker stop</code> は 全プロセスを終了するために <code>SIGTERM</code> を init プロセスに送るのだが、残念ながらほとんどの init システムはハードウェアシャットダウンを前提としており Docker 内で正しく動作しない。これによりプロセスは <code>SIGKILL</code> によって殺され、正常終了せず、ファイルの破損が発生しうる。<br/>
  baseimage-docker は <code>/sbin/my_init</code> という init プロセスを利用することによってこれらの問題に対応する。</p></li>
<li><p>syslog-ng<br/>
  syslog はどんな場合でも必要だろう。baseimage-docker にははじめから syslog-ng が同梱されている。</p></li>
<li><p>SSH Server<br/>
  Docker には nsenter というツールが用意されているが、いくつか問題もある。使い慣れた SSH が利用できるのであれば幸せだ。baseimage-docker はデフォルトで SSH を利用でき、気になる場合には実行しないことも可能だ。（後述）</p></li>
<li><p>cron<br/>
  あると何かと役に立つだろう。</p></li>
<li><p>runit<br/>
  複数プロセスの管理に利用する。起動スクリプトをちょろっと書いて特定フォルダにいれるだけで良いのが有り難い（後述）</p></li>
<li><p>setuser<br/>
  特定のコマンドを別ユーザで実行するための便利ツール。 <code>su</code> より使いやすい。</p></li>
</ul>


<p>init プロセス云々で分かるように Docker を使おうと思えば、一定の UNIX の知識を要する。これが過渡的なものなのか、そのうち解決されて誰でも気軽に使えるようになるのかは分からないけれど。</p>

<p>以下ではより詳しく baseimage-docker について紹介したい。</p>

<h1>複数プロセスを管理する</h1>

<p>baseimage-docker では <code>/etc/service/&lt;サービス名&gt;</code> に <code>run</code> という名前をつけたシェルスクリプトをおくだけで、デーモンとして起動してくれるようになる。</p>

<p>公式よりサンプルを引用。
memcache ユーザで memcached を起動するスクリプト。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">### In memcached.sh (make sure this file is chmod +x):</span>
</span><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c"># `/sbin/setuser memcache` runs the given command as the user `memcache`.</span>
</span><span class='line'><span class="c"># If you omit that part, the command will be run as root.</span>
</span><span class='line'><span class="nb">exec</span> /sbin/setuser memcache /usr/bin/memcached &gt;&gt;/var/log/memcached.log 2&gt;&amp;1
</span><span class='line'>
</span><span class='line'><span class="c">### In Dockerfile:</span>
</span><span class='line'>RUN mkdir /etc/service/memcached
</span><span class='line'>ADD memcached.sh /etc/service/memcached/run
</span></code></pre></td></tr></table></div></figure>


<p>注意</p>

<ul>
<li>デーモンは（デモナイズしたりフォークしたりするのではなく）フォアグラウンドで起動すること</li>
<li>スクリプトは実行許可を与えること（<code>chmod +x</code>）</li>
</ul>


<h1>起動時にスクリプトを実行する</h1>

<p>baseimage-docker では <code>/etc/my_init.d/</code> にシェルスクリプトをおくだけで、起動時に実行してくれる。</p>

<p>公式よりサンプルを引用。
起動した時間を記録するシンプルなスクリプト。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">### In logtime.sh (make sure this file is chmod +x):</span>
</span><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>date &gt; /tmp/boottime.txt
</span><span class='line'>
</span><span class='line'><span class="c">### In Dockerfile:</span>
</span><span class='line'>RUN mkdir -p /etc/my_init.d
</span><span class='line'>ADD logtime.sh /etc/my_init.d/logtime.sh
</span></code></pre></td></tr></table></div></figure>


<p>注意</p>

<ul>
<li>スクリプトは実行許可を与えること（<code>chmod +x</code>）</li>
<li>スクリプトは必ず正常終了させること。0 以外の exit コードで終了すると起動に失敗する。</li>
<li>スクリプトはデーモンプロセス起動 <em>前</em> に実行される</li>
</ul>


<h1>環境変数の管理</h1>

<p>baseimage-docker は環境変数を <code>/etc/container_environment</code> にいくつかの形式でファイルとしてダンプしてくれる。
これの何が嬉しいか。Nginx など子プロセスを生成する際にそれらに環境変数を隠してしまうサービスを利用する場合に、元々の環境変数を利用できるようになるのだ。</p>

<p>詳しくは wiki を参照されたい。</p>

<p><a href="https://github.com/phusion/baseimage-docker#environment-variables">phusion/baseimage-docker</a></p>

<h1>SSH で接続する</h1>

<p>Docker に sshd を起動するかどうかは結構議論の分かれる部分だと思う。Immutable という観点では理想的には不要なのだろう。
が、現実的には管理のために接続の手段は用意しておいた方が便利だろう。セキュリティという観点では別のレイヤー（VPC 上のセキュリティグループなど）で担保できると思う。</p>

<p>baseimage-docker ではデフォルトで sshd が起動している。</p>

<p>sshd を起動したくない場合は以下を <code>Dockerfile</code> に追記しよう。</p>

<figure class='code'><figcaption><span>Dockerfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>RUN rm -rf /etc/service/sshd /etc/my_init.d/00_regen_ssh_host_keys.sh
</span></code></pre></td></tr></table></div></figure>


<h1>nsenter の利点と欠点</h1>

<p>sshd を起動するまでもなく nsenter というツールを利用すれば、docker コンテナ内でコマンドを実行することができる。</p>

<p><a href="https://github.com/jpetazzo/nsenter">jpetazzo/nsenter</a></p>

<h2>利点</h2>

<ul>
<li>コンテナ内で sshd の起動が必要</li>
<li>ssh キー設定が不要</li>
<li>どんなコンテナでも利用可能</li>
</ul>


<h2>欠点</h2>

<ul>
<li>nsenter によって実行されたプロセスは通常時と少々異なる振る舞いをする。例えば、コンテナ内のプロセスから kill することができない。子プロセスについても同様。</li>
<li>nsenter プロセスがシグナルによって終了した場合（例: kill コマンドによって）nsenter によって実行されたコマンドは殺されないし、クリーンアップも行われない。</li>
<li>別のツールを学ぶ必要がある</li>
<li>Docker host の root 権限が必要</li>
<li>nsenter ツールが必要</li>
</ul>


<p>まぁ、でも個人的には新たなツールをいれたくないので ssh で良いかなと思っている。</p>

<h1><code>docker-bash</code> ツール</h1>

<p>ssh で接続する際の一般的な流れは、こんなものだろう。</p>

<ol>
<li><code>docker ps</code> で実行中のコンテナ ID を調べて</li>
<li><code>docker inspect -f "" &lt;ContainerID&gt;</code> で IP 調べて</li>
<li><code>ssh -i /path/to/yourkey root@CONTAINER_IP_ADDR</code></li>
</ol>


<p>しかし <code>Dockerfile</code> を書きつつ環境構築している際にはこの手順がヒジョーに煩わしくなる。</p>

<p><code>docker-bash</code> ツールを使えば手順はもっと単純になる。</p>

<p>インストールも簡単だ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>curl --fail -L -O https://github.com/phusion/baseimage-docker/archive/master.tar.gz &amp;&amp; \
</span><span class='line'>tar xzf master.tar.gz &amp;&amp; \
</span><span class='line'>sudo ./baseimage-docker-master/install-tools.sh
</span></code></pre></td></tr></table></div></figure>


<p>実行するには</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker-bash YOUR-CONTAINER-ID
</span></code></pre></td></tr></table></div></figure>


<p>で SSH 接続できる。</p>

<p>直近のコンテナ ID を取得するエイリアスを定義するともっと便利だ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">alias </span><span class="nv">dl</span><span class="o">=</span><span class="s2">&quot;docker ps --latest --quiet&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記を <code>.bashrc</code> などに定義すると、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker-bash <span class="sb">`</span>dl<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>一発で接続できる。</p>

<h1>終わりに</h1>

<p>Docker はクセが強く、また現時点では UNIX に関する深い知識が要求される。
初心者が一からイメージを作るのは、練習であれば全く問題ないが、
実用を考えるのであれば、とりあえずは <a href="https://github.com/phusion/baseimage-docker#environment-variables">phusion/baseimage-docker</a> からイメージを作ってみよう。
オリジナルイメージを作成するのは慣れてからでも、Docker のバージョンアップを待ってからでも遅くないハズだ。</p>

<p>また、Ruby や Python や Node.js を利用する場合には、同じく Phusion が用意している <a href="https://github.com/phusion/passenger-docker">phusion/passenger-docker</a> を利用すると良い。
これは phusion/baseimage-docker を拡張したもので、様々な便利ライブラリが同梱されている（ruby, python, node.js, git, その他言語毎に必要なライブラリ）。</p>

<p>Docker とは別に Nginx + Phusion Passenger でも色々とハマるのでそのうち記事を書きたいと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[エンジニアから見た WWDC 2014 雑感]]></title>
    <link href="http://blog.kakipo.com/wwdc2014/"/>
    <updated>2014-06-03T06:31:00+09:00</updated>
    <id>http://blog.kakipo.com/wwdc2014</id>
    <content type="html"><![CDATA[<p>ハードウェアの発表はなかったんですね。<br/>
しかし、エンジニア的には衝撃的＆ワクワクする内容が多かった印象です。</p>

<h1>衝撃</h1>

<h2>Swift</h2>

<p>冒頭から衝撃的。<br/>
朝起きたら Objective-C が死んでいた。
Apple がハシゴを外すのはもはやお家芸か。</p>

<p>パッと見た限り、LL っぽくて書きやすくなりそう。
インタラクティブシェルもあるみたい。いいねいいね。
Objective-C とも同居できるようなので大きな混乱はないのでは。</p>

<p>パフォーマンス面でもネイティブコードに変換されるそうなので、問題なさそう。RubyMotion と同じ仕組みなのかな。</p>

<p><a href="https://developer.apple.com/swift/">Swift &ndash; Apple Developer</a></p>

<p>追記: 2014-06-03 現在「swift lang」でググると別の言語がトップに表示される。<br/>
しばらくはネタとして揶揄されるんだろうな。罪のない言語を死滅においやる Apple △。</p>

<p>Apple「オレがルールだ！」</p>

<p><a href="http://swift-lang.org/">swift-lang.org</a></p>

<h2>Extensibility</h2>

<p>iOS アプリ間連携がよりスムーズになる。<br/>
Cocoa App 開発でよくつかう Scripting Bridge 機能の iOS 版か。
今後は iOS アプリ開発も他アプリとの連携を考えることが大切になりそう。</p>

<h2>CloudKit</h2>

<p>サーバサイドでの認証、ストレージ、検索機能を Apple が提供。基本無料。
開発者としては心理的、金銭的、時間的負担が下がりメリットありまくり。Apple ロックインが加速する。BaaS 死亡のお知らせか。</p>

<h1>ワクワク</h1>

<h2>AirDrop の Mac &lt;&ndash;> iOS 対応</h2>

<p>いままでは iOS 同士または Mac 同士限定だった AirDrop が Mac &lt;&ndash;> iOS 間で動作可能に。アプリ開発時にキャプチャとって Mac に送るということが多いので結構うれしい。</p>

<h2>家族間共有</h2>

<p>iPhone はパーソナルユースに。iPad はリビングに 1 台というシナリオがしっくりくると思うのでとても良い。</p>

<h2>HealthKit</h2>

<p>まずは SDK から公開。ハードも同時にくるかと思ったが。
健康アプリがますます増えそうで良い。
BLE を利用したガジェットとの連携も楽しみである。
先進的な病院へ自身の健康情報を共有するような未来は近いかもしれない。</p>

<h2>Shazam 統合</h2>

<p>ホームボタン長押しで曲名判明 &ndash;> iTunes Store で購入とシナリオは多くなりそうでとても嬉しい。音楽体験が変わりそう。</p>

<h2>TestFlight 機能追加</h2>

<p>詳細はわからないけれど、大好きなサービスなので期待。</p>

<h2>HomeKit</h2>

<p>これも詳細分からないけれど、Siri との連携が用意なら夢は膨らみそう。シームレスな体験が期待できそう。</p>

<h1>その他</h1>

<ul>
<li>Yosemite はフラットな UI<br/>
  お、おう</li>
<li>タイトルバーはコンテンツに応じて変わる半透明<br/>
  うん</li>
<li>iMessage アプリをシームレスに、機能追加。Mac から電話もできるぞ！<br/>
  早くどこか買収すればよかったのに</li>
<li>Safari UI &amp; パフォーマンス改善<br/>
  使わない</li>
<li>Mail UI &amp; パフォーマンス改善<br/>
  使わない</li>
<li>カレンダー UI &amp; パフォーマンス改善<br/>
  使わない</li>
<li>通知センター改善<br/>
  使わない</li>
<li>QuickType<br/>
  使ってみると便利なのかも。</li>
<li>フォトアプリ改善<br/>
  うん</li>
<li>iCloud Drive、容量アップ<br/>
  おそらく、使わない</li>
<li>AppStore アップグレード<br/>
  ASO の会社しばらく大変そうだ</li>
<li>Touch ID API<br/>
  iPhone 5 なので。ロック画面とアプリ内で 2 段階認証は安心と思いつつ、乱用するとユーザには嫌われそう。</li>
<li>Metal &amp; SpriteKit<br/>
  多分使わない</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web ディレクターのための iBeacon 入門]]></title>
    <link href="http://blog.kakipo.com/ibeacon-at-garage-akihabara/"/>
    <updated>2014-05-14T10:25:13+09:00</updated>
    <id>http://blog.kakipo.com/ibeacon-at-garage-akihabara</id>
    <content type="html"><![CDATA[<p>2014-05-12 <a href="http://garage-working.com/">GARAGE AKIHABARA</a> にて、「Web ディレクターのための iBeacon 入門」と題したプレゼンを行いました。</p>

<ul>
<li>iBeacon って最近よく聞くけど何なの？</li>
<li>iBeacon を使うとなにが嬉しいの？</li>
</ul>


<p>などの基本的な知識に加え、今後現場で活かせる知識を得ていただけることを目指しました。</p>

<script async class="speakerdeck-embed" data-id="6b34df80bc12013182c74af3413e5309" data-ratio="1.33333333333333" src="http://blog.kakipo.com//speakerdeck.com/assets/embed.js"></script>


<p>今のトコロ利用されているのは O2O の文脈や展示品の解説などといったシーンが多い印象ですが、 iBeacon の仕様は比較的シンプルであるため扱いやすく、また端末自体も非常に安価なため様々な場面で応用が効くかと思います。<br/>
今後どのようなサービスが展開されていくか、とても楽しみですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZowLog 1.2 をリリースしました]]></title>
    <link href="http://blog.kakipo.com/zowlog-1-dot-2/"/>
    <updated>2014-04-25T20:11:37+09:00</updated>
    <id>http://blog.kakipo.com/zowlog-1-dot-2</id>
    <content type="html"><![CDATA[<p>ZowLog の新バージョン 1.2 をリリースしました。<br/>
＃ZowLog のご紹介はこちらから → <a href="http://blog.kakipo.com/zowlog-release">ZowLog という Mac 用メモツールを作りました</a></p>

<p><span class="no-shadow">
<a href="https://itunes.apple.com/us/app/zowlog/id823917791?ls=1&amp;mt=12"><img src="http://blog.kakipo.com/images/zowlog/zowlog-256.png" alt="&quot;ZowLog&quot;" /></a>
</span></p>

<p><a href="https://itunes.apple.com/us/app/zowlog/id823917791?ls=1&amp;mt=12"><img src="http://blog.kakipo.com/images/zowlog/appstore.png" alt="&quot;ZowLog&quot;" /></a></p>

<p>バージョン 1.2 では Evernote を起動していない状態でもメモを取ることができるようになりました。</p>

<p>また、「フォントサイズを大きくして欲しい」「等幅フォントで編集したい」というご要望にお応えして、編集時のフォントを選択できるようになりました！<br/>
＃Evernote には標準フォントで書き込まれます</p>

<p><img src="http://blog.kakipo.com/images/zowlog/change-font.gif" alt="&quot;Change font&quot;" /></p>

<p>より使いやすくなった ZowLog を是非お試しください。</p>

<p><a href="https://itunes.apple.com/jp/app/zowlog/id823917791?mt=12">Mac App Store &ndash; ZowLog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[いつになったら覚えるの？]]></title>
    <link href="http://blog.kakipo.com/mac-special-key/"/>
    <updated>2014-03-21T09:52:19+09:00</updated>
    <id>http://blog.kakipo.com/mac-special-key</id>
    <content type="html"><![CDATA[<p>いつまでたっても覚えられないのでつくりました。<br/>
デスクトップの端っこに置いています。</p>

<p><img src="http://blog.kakipo.com/images/mac-special-key-symbols-small.png" alt="&quot;mac special key symbols&quot;" /></p>

<p>command は分かるんだよ。command は。</p>

<p>いつまでたっても覚えられないのでカレンダーにしてみました。<br/>
壁に貼って覚えようと思います。</p>

<p><img src="http://blog.kakipo.com/images/mac-special-key-symbols-calendar.jpg" alt="&quot;special key symbols calendar&quot;" /></p>

<p>大きいサイズの画像はこちらから。ご自由にお使いください。<br/>
<a href="http://blog.kakipo.com/images/mac-special-key-symbols-big.png">mac-special-key-symbols-big.png (1200x1200)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZowLog という Mac 用メモツールを作りました]]></title>
    <link href="http://blog.kakipo.com/zowlog-release/"/>
    <updated>2014-03-17T23:25:27+09:00</updated>
    <id>http://blog.kakipo.com/zowlog-release</id>
    <content type="html"><![CDATA[<p>ZowLog という Mac アプリを作りました。</p>

<p><span class="no-shadow">
<a href="https://itunes.apple.com/us/app/zowlog/id823917791?ls=1&amp;mt=12"><img src="http://blog.kakipo.com/images/zowlog/zowlog-256.png" alt="&quot;ZowLog&quot;" /></a>
</span></p>

<p><a href="https://itunes.apple.com/us/app/zowlog/id823917791?ls=1&amp;mt=12"><img src="http://blog.kakipo.com/images/zowlog/appstore.png" alt="&quot;ZowLog&quot;" /></a></p>

<p>ZowLog はすばやくメモを書くためのツールです。Evernote に 1 日 1 つだけノートを作り、メモを追記していきます。</p>

<p>もしあなたが一日中 Mac の前でお仕事をされているのであれば、ピッタリのツールです。</p>

<p><strong>有料です</strong>。200円。<br/>
売上は我が家のネコのカンヅメ代になります。ニャ。</p>

<p>日常的に Evernote を使ってメモをとられているのであれば、すぐに元を取っていただけると思います。</p>

<p>App Store からダウンロードできます。</p>

<p><a href="https://itunes.apple.com/us/app/zowlog/id823917791?ls=1&amp;mt=12">Mac App Store &ndash; ZowLog</a></p>

<h1>何がうれしいの？</h1>

<p>はやいです。思いついたらすぐに起動、メモをとり始めることができます。</p>

<p>1 日に 1 ノート、時刻つきでメモが追記されていくため、自分だけのタイムラインのように使うこともできます。共有ノートブックに保存するよう設定すれば、チーム内の簡易業務日報ツールとして使うこともできるかもしれません。</p>

<p><img src="http://blog.kakipo.com/images/zowlog/movie.gif" alt="&quot;ZowLog&quot;" /></p>

<p>このテのアプリ、iPhone や Android ではたくさんあるのですが、Mac には見当たらなかったので作りました。
私自身ほぼ一日中 Mac の前にいるため、Mac 上で簡単に Evernote にメモできるアプリが欲しかったのです。</p>

<p>外（あまりないですが）では iPhone アプリでメモを書き、オフィスや自宅では ZowLog でメモを書いています。どちらも書き込み先のノートは同じもの。1 日 1 ノートにまとめることでノートブックが散らからないよう意識しています。</p>

<p>快適。</p>

<p><del>ただし <strong>ZowLog を利用するには Evernote が起動している必要があります</strong>。</del></p>

<p><del>この辺のデザインは非常に悩んだところではあります。  </del>
<del>とにかくストレスなくサササッと書き込めることを優先し、今の仕様となりました。</del></p>

<p><del>「Mac でメモ取るヒトは Evernote の一つや二つ、起動しとるじゃろ。オフラインで使えんくなるのもよぉないしの。」</del></p>

<p><del>と、勝手に想像していましたが、Evernote を起動していない状態でも利用したいという声を早速もらっているので今後対応したいと思います。  </del>
<del>ブラウザから Evernote を使う人がいるとは。使いにくくないですか。そんなことない？今度使ってみます。</del></p>

<blockquote>
（2014-04-25 追記）  <br />
バージョン 1.2 より Evernote が起動していない状態でもメモをとれるようになりました！  <br />
<a href="http://blog.kakipo.com/zowlog-1-dot-2">ZowLog 1.2 をリリースしました</a>
</blockquote>


<h1>考えるために書く</h1>

<p><img src="http://blog.kakipo.com/images/zowlog/writing-2.png" alt="&quot;ZowLog&quot;" /></p>

<p>以下は余談です。</p>

<p>「考えるために書く」という行為がもっと意識されるようになると良いなと思っています。</p>

<p>書いて→伝える、だけではなくて。
書いて→考えて→書いて→考えて→（ループ）。</p>

<p>Facebook や Twitter に少しだけマジメな投稿を書いている時、「へぇ、私ってこんなふうに考えてたのね」と自身の意外な考えに気づいた経験、ありませんか。書いている時は同時に考えてもいるのです。</p>

<p>当たり前のようですけれど、意外と見過ごされがちなのかな、と。<br/>
書くことは考えることを強制する力があるみたいです。</p>

<p>例えば「今回の都知事選について」とか「あの話題のサービスを評価してやる」とか。書こうと思うと脳みそグルグル回転しませんか。「お台場に来た！」とか「今日は朝からパンケーキ☆」っていうのはなんていうか、ベツモノな気がしますけれど。</p>

<p>SNS やメールやメッセージングアプリを使うようになって、他人に対して「書く」機会は増えました。自分のために、考えるために「書く」機会が増えても良いんじゃないかなと。</p>

<p>私達の頭の中はとても複雑で、不安定です。フワフワして不透明で、曖昧で移ろいがちです。何かを考えているときにも、あっちが気になり、こっちが気になり、結局何を考えていたんだっけ？と迷子になる。「書く」ことは、そんな嵐の海にも似た荒れる意識の中にゆっくりと沈み込み、静かに自分自身と対話するための良きパートナーとなってくれるでしょう。</p>

<p>伝達の手段として「書く」だけではなく、ふわふらとしたアイディアを一歩一歩踏み固め、まとめるために「書く」ことがもっと認識されると良いと思っています。</p>

<h1>シェアする</h1>

<p><img src="http://blog.kakipo.com/images/zowlog/writing-3.png" alt="&quot;ZowLog&quot;" /></p>

<p>書いて→考えて→書いて→考えて→（ループ）→ <strong>伝える</strong></p>

<p>考えるために書いたメモはごく個人的なモノなので、ある程度まで整理できてしまえば捨ててしまって構わないです。でも、せっかくなら誰かに伝えると世界は少しだけよくなるかも。いいね！されたりリツイートされると承認欲求も満たせて自分も嬉しい。</p>

<p>ボク自身はエンジニアということもあり、普段は技術的なコトガラをメモすることが多いです。どこでハマったか、どうやって解決しようとしたか、面白いツールやライブラリを見つけた、とか。その中でも有用だと思ったことは少しだけ時間をかけてまとめて、Qiita やチーム内の Wiki や Chatwork などにポストしています。</p>

<p>ちょっとしたアイディアやヒトの反応を知りたいものは Twitter や Facebook にポストすることもあります。気持ちを整理するために書く感情的なメモはインターネットにはあまり公開しません。読んでみて気持ちの良いものではないですしね。</p>

<p>ボクは ZowLog + Evernote が一番使いやすいのですが、手に馴染むものであれば何でも良いです。それぞれが使いやすいツールを使うのが一番。紙とペンでもいい。Evernote でも emacs でも Sublime Text でもなんでも (vim でも)。お気に入りのエディタでメモを書いてみましょう！</p>

<h1>おわりに</h1>

<p>「考えるために書く」というお話は古今東西いろいろなところで話されていて特に目新しい話題ではないかもしれません。悩みがあれば書き出してみなさい、とか、新しい企画を立てるときにはマインドマップを書くとか。でも、そんな身構えなくてももっと自由に書き散らかしていいと思います。悩みが無くても企画を考えるのではなくても、もっと日常的に書いてみませんか。</p>

<h1>参考</h1>

<p>様々な小説、エッセイ、ブログ記事で「書く」ことによる効果を述べています。</p>

<ul>
<li><a href="http://nando.seesaa.net/article/51904501.html">◆ なぜ言語力が重要か？: 　nando ブログ</a></li>
<li><a href="http://www.paulgraham.com/writing44.html">Writing, Briefly</a></li>
<li><a href="http://canvasdialy.blog.so-net.ne.jp/2012-09-17">考えてからではなく考えるためにボクは書く。：平尾剛のCANVAS.日記：So-net blog</a></li>
<li><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4101001405/nowshika-22/ref=nosim/">Amazon.co.jp： 村上朝日堂はいほー! (新潮文庫): 村上 春樹: 本</a></li>
<li><a href="http://www.amazon.co.jp/%E3%80%8C%E8%80%83%E3%81%88%E3%82%8B%E3%80%8D%E3%81%9F%E3%82%81%E3%81%AE%E5%B0%8F%E8%AB%96%E6%96%87-%E3%81%A1%E3%81%8F%E3%81%BE%E6%96%B0%E6%9B%B8-%E8%A5%BF-%E7%A0%94/dp/4480057102">Amazon.co.jp： 「考える」ための小論文 (ちくま新書): 西 研, 森下 育彦: 本</a></li>
<li><a href="http://d.hatena.ne.jp/naoya/20131107/1383792634">「書く」のは特別な道具 &ndash; naoyaのはてなダイアリー</a></li>
<li><a href="http://gitanez.seesaa.net/article/73819075.html">「考える」方法を学ぶ: DESIGN IT! w/LOVE</a></li>
<li><a href="http://www.ias.sci.waseda.ac.jp/GraduationThesis/2011_summary/1w080525_s.pdf">「考える」ための「書く」情報処理支援システムの提案 (PDF)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[計画について]]></title>
    <link href="http://blog.kakipo.com/planning/"/>
    <updated>2014-02-28T12:12:52+09:00</updated>
    <id>http://blog.kakipo.com/planning</id>
    <content type="html"><![CDATA[<p>考えながら走らないと進まないです。</p>

<p>計画は必ず立てないといけないです。<br/>
けれど完璧な計画なんてものはあり得なくて、<br/>
内外様々な要因によって変更は必ず発生します。</p>

<p>むしろ計画は随時見なおすべきものです。変更を恐れるべきではないです。<br/>
計画は自分や他人の見積もりの甘さを責めるためのものではなくて、<br/>
プロジェクトを前進させるための道具です。</p>

<p>「やることが全て出揃った！あとはやるだけだ！ヨーイドン！」<br/>
理想的ですし、精神衛生上よろしいのですが、現実的ではないです。</p>

<p>先を見ずに行動するのは愚か者ですが、<br/>
全てが明らかになってからでしか行動できないのは臆病者です。</p>

<p>考えながら走りましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fluentd -> Elasticsearch 大量データ転送でトラブル]]></title>
    <link href="http://blog.kakipo.com/trouble-with-fluentd-and-elasticsearch/"/>
    <updated>2014-02-01T19:42:15+09:00</updated>
    <id>http://blog.kakipo.com/trouble-with-fluentd-and-elasticsearch</id>
    <content type="html"><![CDATA[<h1>概要</h1>

<ul>
<li>fluentd でサービスの情報を転送し、Kibana で分析したい</li>
<li>これまでの過去データを一度に放り込みたい</li>
<li>データの件数が合わない</li>
<li>Kibana でエラーが発生する</li>
<li>各種設定を見直すことで対応可能</li>
</ul>


<h1>背景</h1>

<p>長い長いミーティングに疲れ、集中力を擦り減らしたアナタは
無意識のうちにブラウザを起動していました。</p>

<p>去年まで勤めていた会社の同僚がシェアした記事が目に止まります。</p>

<p><strong>「fluentd + Elasticsearch + Kibana で今どきのログ分析！」</strong></p>

<p>感化されやすいアナタはおもむろに VM を立ち上げ環境を構築します。
Web サーバから吐き出されたログはオシャレでイイ感じにチャート化され、
満足したアナタは VM を落とし、再び仕事に戻りました。</p>

<p>しばらく経ったある日のこと、ふと気づきます。
「ログだけじゃなくて、ユーザ属性の分析にもコレ使えそう。」</p>

<p>毎度オレオレ管理ページを作ることに疲れていたアナタは、
さっそくこの思いつきを行動に移しました。</p>

<p>が、簡単にはうまくいきません。
登録されるデータが想定より多かったり少なかったり。
Kibana はエラーメッセージを吐き出したり。
アナタは茨の道に踏み込んでしまったことに気づいたのです。</p>

<h1>症状・原因・対策</h1>

<h2>症状①: 登録される record が少ない</h2>

<p>登録されたレコードが想定より少ない。
この場合、様々な原因が考えられます。</p>

<h3>原因1: 大量 index 作成の負荷</h3>

<p>Kibana はデフォルトでは <code>logstash-YYYY.MM.dd</code> 形式の index を期待しており、
fluent-plugin-elasticsearch もその形式で index を設定します。</p>

<p>今回のように過去のデータを一括で（新規に）登録しようする場合、
日数分の index を作成するために大きな負荷が発生し、
処理に失敗する可能性があります。</p>

<p>その際には以下のような <code>ProcessClusterEventTimeoutException</code> がログに追記されます。</p>

<figure class='code'><figcaption><span>/var/log/elasticsearch/elasticsearch.log</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[2014-01-31 11:57:46,255][DEBUG][action.admin.indices.create] [Mace, Gideon] [logstash-2013.06.13] failed to create
</span><span class='line'>org.elasticsearch.cluster.metadata.ProcessClusterEventTimeoutException: failed to process cluster event (create-index [logstash-2013.06.13], cause [auto(bulk api)]) within 30s
</span><span class='line'>    at org.elasticsearch.cluster.service.InternalClusterService$2$1.run(InternalClusterService.java:239)
</span><span class='line'>    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1146)
</span><span class='line'>    (...)
</span></code></pre></td></tr></table></div></figure>


<p>また、後述のように Elasticsearch では処理キュー数が閾値を超えた場合、
後続の処理を破棄される設定となっているために、index の作成自体がなされない可能性があります。</p>

<p>通常の利用シナリオではこのように一度に大量の index を作成することはあまりないため、問題になることは少ないでしょう。</p>

<h4>対策</h4>

<p>今のところ Timeout までの設定値を変更することはできないようです。
あらかじめ必要となる index を作成しておきましょう。</p>

<h4>参考</h4>

<ul>
<li><a href="http://elasticsearch-users.115913.n3.nabble.com/ProcessClusterEventTimeoutException-in-Elasticsearch-Is-this-timeout-value-configurable-If-yes-how-td4048308.html">ElasticSearch Users &ndash; ProcessClusterEventTimeoutException in Elasticsearch. Is this timeout value configurable? If yes how?</a></li>
</ul>


<h3>原因2: 処理キューが閾値を超えた場合にリクエストを破棄する</h3>

<p>Elasticsearch はデフォルトで閾値を超えたキューを破棄する設定となっています。
例えば index の作成は 50 個まで、bulk 処理は 20 個までといった具合。</p>

<p>メモリの消費を抑え適切に管理するための設定ではあるのですが、
この設定により作られるハズの index が作成されなかったり、
投入されるハズの record が作成されなかったりします。</p>

<h4>対策</h4>

<p>Thread Pool のキューサイズを変更します。</p>

<figure class='code'><figcaption><span>/etc/elasticsearch/elasticsearch.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># queue_size は実行するスレッドが存在せずペンディングされたリクエスト</span>
</span><span class='line'><span class="c1"># のキューの数の設定に使用します。キューが満杯の状態で</span>
</span><span class='line'><span class="c1"># リクエストが来た際には、そのリクエストは破棄されます。</span>
</span><span class='line'><span class="c1"># 制限をしたくない場合には -1 を設定してください。</span>
</span><span class='line'><span class="l-Scalar-Plain">threadpool.index.queue_size</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">-1</span> <span class="c1"># デフォルト 200</span>
</span><span class='line'><span class="l-Scalar-Plain">threadpool.bulk.queue_size</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">-1</span> <span class="c1"># デフォルト 50</span>
</span><span class='line'><span class="c1"># threadpool.search.queue_size: -1</span>
</span><span class='line'><span class="c1"># threadpool.get.queue_size: -1</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>注) サーバのスペック、処理したいデータ量に応じて設定してください。</em>
<em>不適切な設定はメモリの過剰消費によるメモリ不足やスラッシングの原因となる可能性があります。</em></p>

<h4>参考</h4>

<ul>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-threadpool.html#modules-threadpool">Thread Pool [0.90]</a></li>
<li><a href="https://github.com/elasticsearch/elasticsearch/issues/3888">Set queue sizes by default on bulk/index thread pools · Issue #3888 · elasticsearch/elasticsearch</a></li>
</ul>


<h3>原因3: データマッピングに失敗している</h3>

<p>Elasticsearch は新たに投入される record を解析し、
動的にデータ型を規定します。その後規定された型と合わないデータを
投入しようとすると <code>MapperParsingException</code> が発生します。</p>

<p>特に「日付のようなフィールド」を日付型と認識される可能性が
あることに注意してください。</p>

<p>次のログは日付型のフィールドに空文字を設定しようとした場合に出力されました。</p>

<figure class='code'><figcaption><span>/var/log/elasticsearch/elasticsearch.log</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[2014-01-31 12:39:07,907][DEBUG][action.bulk              ] [Nicholas Scratch] [logstash-2013.09.18][1] failed     to execute bulk item (index) index {[logstash-2013.09.18][xxxx_type][xxxxx_id_0000], source[{....}]}
</span><span class='line'>org.elasticsearch.index.mapper.MapperParsingException: failed to parse [xxx_day]
</span><span class='line'>        at org.elasticsearch.index.mapper.core.AbstractFieldMapper.parse(AbstractFieldMapper.java:416)
</span><span class='line'>(...)
</span><span class='line'>Caused by: org.elasticsearch.index.mapper.MapperParsingException: failed to parse date field [], tried both date format [dateOptionalTime], and timestamp number with locale []
</span><span class='line'>        at org.elasticsearch.index.mapper.core.DateFieldMapper.parseStringValue(DateFieldMapper.java:487)
</span><span class='line'>        at
</span><span class='line'>(...)
</span></code></pre></td></tr></table></div></figure>


<h4>対策</h4>

<p>Elasticsearch の Default Mapping 設定を見直しましょう。
<code>default-mapping.json</code> という設定ファイルを作成することで、
デフォルトのマッピング設定を変更することが可能です。</p>

<figure class='code'><figcaption><span>/etc/elasticsearch/default-mapping.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;_default_&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;properties&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;foo&quot;</span> <span class="p">:</span> <span class="p">{</span><span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="nt">&quot;bar&quot;</span> <span class="p">:</span> <span class="p">{</span><span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>参考</h4>

<ul>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-root-object-type.html">Root Object Type [0.90]</a></li>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-object-type.html">Object Type [0.90]</a></li>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-core-types.html">Core Types [0.90]</a></li>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-date-format.html">Date Format [0.90]</a></li>
</ul>


<h2>症状②: 逆に登録される record が多い</h2>

<p>登録されたデータが想定より多い。
fluentd のログにリトライした形跡がある。</p>

<h3>原因</h3>

<p>Elasticsearch の負荷が高いため、登録処理自体は行われたものの
fluentd へのリプライに失敗。その後 fluentd がリトライを試み、
重複してデータが登録されたことが原因の可能性があります。</p>

<h4>対策</h4>

<p>なかなか難しい問題です&hellip;
Elasticsearch 側でエラーが発生しないように頑張り、
ある程度の重複の発生を受け入れる or 頑張って削除するのが現実的でしょうか。</p>

<h4>参考</h4>

<ul>
<li><a href="https://github.com/uken/fluent-plugin-elasticsearch">uken/fluent-plugin-elasticsearch</a></li>
</ul>


<h2>症状③: Kibana で エラーが発生する（Parse Failure）</h2>

<p>Kibana にて以下のようなエラーが発生する。</p>

<p><code>Parse Failure [No mapping found for [@timestamp] in order to sort on]</code></p>

<h3>原因</h3>

<p>空の index に対して検索を行い処理に失敗している可能性があります。
Kibana が生成するクエリの問題です。</p>

<h4>対策</h4>

<p>record が存在しない空の index は削除しましょう。</p>

<h4>参考</h4>

<ul>
<li><a href="https://logstash.jira.com/browse/LOGSTASH-889">[LOGSTASH-889] Empty indices throw error &ndash; logstash.jira.com</a></li>
</ul>


<h2>症状4: Kibana で エラーが発生する（Could not contact Elasticsearch）</h2>

<p>Kibana にて以下のエラーが発生する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Error Could not contact Elasticsearch at http://x.x.x.x:9200. Please ensure that Elasticsearch is reachable from your system.
</span></code></pre></td></tr></table></div></figure>


<p>また、 Elasticsearch のログには以下のようなエラーが記録される。</p>

<figure class='code'><figcaption><span>/var/log/elasticsearch/elasticsearch.log</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[2014-01-31 13:58:28,444][WARN ][http.netty               ] [Nicholas Scratch] Caught exception while handling client http traffic, closing connection [id: 0xad362931, /x.x.x.x:36389 =&gt; /x.x.x.x:9200]
</span><span class='line'>org.elasticsearch.common.netty.handler.codec.frame.TooLongFrameException: An HTTP line is larger than 4096 bytes.
</span><span class='line'>        at org.elasticsearch.common.netty.handler.codec.http.HttpMessageDecoder.readLine(HttpMessageDecoder.java:642)
</span><span class='line'>        at org.elasticsearch.common.netty.handler.codec.http.HttpMessageDecoder.decode(HttpMessageDecoder.java:182)
</span><span class='line'>        (...)
</span></code></pre></td></tr></table></div></figure>


<h3>原因</h3>

<p>検索対象の index が多く、リクエスト URL の長さが規定値を上回っている可能性があります。</p>

<h4>対策</h4>

<p>Elasticsearch の <code>max_initial_line_length</code> を設定します。</p>

<figure class='code'><figcaption><span>/etc/elasticsearch/elasticsearch.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">(...)</span>
</span><span class='line'><span class="l-Scalar-Plain">http.max_initial_line_length</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">100k</span>
</span></code></pre></td></tr></table></div></figure>


<h4>参考</h4>

<ul>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-http.html">HTTP [0.90]</a></li>
</ul>


<h1>（おまけ）Elasticsearch スニペット</h1>

<ul>
<li><p>全 index の取得</p>

<p>  <code>curl -XGET http://localhost:9200/_aliases?pretty=1</code></p></li>
<li><p>type を指定して取得</p>

<p>  <code>curl -XGET 'http://localhost:9200/_all/my_type/_search?pretty'</code></p></li>
<li><p>全 index の削除</p>

<p>  <code>curl -XDELETE 'http://localhost:9200/_all'</code></p></li>
<li><p>type を指定して削除</p>

<p>  <code>curl -XDELETE 'http://localhost:9200/_all/my_type/'</code></p></li>
</ul>


<h1>参考</h1>

<ul>
<li><a href="http://blog.johtani.info/images/entries/20130830/IntroductionES20130829.pdf">blog.johtani.info/images/entries/20130830/IntroductionES20130829.pdf</a></li>
<li><a href="http://blog.sematext.com/2013/07/08/elasticsearch-refresh-interval-vs-indexing-performance/">Elasticsearch Refresh Interval vs Indexing Performance | Sematext Blog</a></li>
<li><a href="http://y-ken.hatenablog.com/entry/fluentd-elasticsearch-kibana-index-partitioning">Fluentd+Elasticsearch+Kibana構成で便利な、logstash形式インデックスの粒度をカスタマイズする方法 &ndash; Y-Ken Studio</a></li>
<li><a href="http://www.slideshare.net/JunOhtani/elasticsearch-pyfes-201207">Elasticsearch入門 pyfes 201207</a></li>
<li><a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-bulk.html">Bulk API [0.90]</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RDBMS と NoSQL の使いわけかた]]></title>
    <link href="http://blog.kakipo.com/how-to-pick-rdbms-and-nosql/"/>
    <updated>2013-12-02T19:26:00+09:00</updated>
    <id>http://blog.kakipo.com/how-to-pick-rdbms-and-nosql</id>
    <content type="html"><![CDATA[<p>RDBMS と NoSQL の使いわけの基準について。</p>

<p>議論は出尽くして擦り切れた感があるのだけれども、
ぼく自身の経験から得られた基準をまとめておこうと思う。</p>

<p>適材適所という言葉に従うための基準。</p>

<ul>
<li>汎用性を考えるとやっぱり RDBMS に分がある

<ul>
<li>どちらを使うべきか迷うなら RDBMS で良い</li>
<li>枯れた技術だし、実績も情報もたくさんある</li>
<li>石を投げれば SQL マスターやパフォチューに苦労した先人達に当たる</li>
</ul>
</li>
<li>NoSQL と相性のいいユースケース

<ul>
<li>使いすてのアプリケーション

<ul>
<li>プロトタイプ</li>
<li>キャンペーン</li>
</ul>
</li>
<li>モデル（コレクション）の数が少ない

<ul>
<li>10 個くらいが閾値</li>
<li>キャッシュストレージ</li>
<li>ログストレージ</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>「スキーマデザイン考えなくて良い！ひゃっほう！」ってな考えの基での NoSQL の採用は問題の先送りにしかならず、
熱力学第二法則よろしく日々データモデルは複雑化していき、つぎはぎだらけのシステムがあなたのプライベートを殺す。</p>
]]></content>
  </entry>
  
</feed>
